
# Development code for ABTGT
library(PerformanceAnalytics)
library(mc2d) # for vectorized  array-based rmultinom
library(ABTMSE)
library(ABTGT)
loadABT()

setwd("C:/GitHub/ABTGT") # laptop
setwd("C:/Users/tcarruth/Documents/GitHub/ABTGT") # workstation
files<-list.files("./ABTGT/R/")
files<-files[files!="Brownie"&files!="processed_data"]
for (fl in files) source(file.path("./ABTGT/R/", fl)) # load source code and formatted data


OM<-readRDS("G:/Shared drives/BM shared/1. Projects/Bluefin_Gene_Tag/Testing/OMtest.rda")  
GT <- make_GT(OM,nT=20*200,RD="E_Tag",ryrs=20)
GT$GTcheck=T
MPs=list(c("GTMP","GTMP"))

TAC2019=c(32240000,2350000)
TAC2020=c(36000000,2179000)
TAC2021=c(36000000,2350000)
TAC2022=c(36000000,2350000)
Allocation=ABTMSE:::Allocation
MPareas=NA
Fdistyrs=3
maxTAC=c(10,10)
MSEparallel=F
check=FALSE
Reallocate=TRUE
#GT=NULL


#GT <- make_GT(OM_1t,nT=10000,RD="Test")
#object.size(GT)/1E6 # megabytes big

source("G:/Shared drives/BM shared/1. Projects/Bluefin_Gene_Tag/Methods/Spool-up code.R")




  MP<-2 #for(MP in 1:nMPs){

  set.seed(OM@seed)

  cat(paste0(paste0(MP,"/",nMPs," Running MSE for: "),paste0(MPsa[[MP]]," (",.Object@Snames,")",collapse="  ")))  # print a progress report
  cat("\n")
  flush.console()                                    # update the console

  #make_GT_arrays(doGT,GT,nsim,npop,nyears,nsubyears,nages) # makes:  TH[nT,nsim,npop,nyears,nsubyears]  TAL[nT,nsim,npop,nareas]  Tage[nT,nsim]

  #y<-nyears #

  for(y in nyears:(nyears+proyears)){ # for(y in nyears:(upyrs[1]-1)){

    # y<-y+1; print(y)
    if(y==nyears){           # 2019 # 55
      TAC<-TACtrial<-array(rep(TAC2019,each=nsim),c(nsim,nAss))
    } else if (y==nyears+1){ # 2020 # 56
      TAC<-TACtrial<-array(rep(TAC2020,each=nsim),c(nsim,nAss))
    } else if (y==nyears+2){ # 2021 # 57
      TAC<-TACtrial<-array(rep(TAC2021,each=nsim),c(nsim,nAss))
    } else if (y==nyears+3){ # 2022 # 58
      TAC<-TACtrial<-array(rep(TAC2022,each=nsim),c(nsim,nAss))
    }

    if(y>=nyears & y<nyears+MPlag){
      testC[testCind]<-TAC[testCind[,c(1,5)]]*TACdist[testCind] # predicted catch by TAC
      aggC<-apply(testC,1:4,sum)
      #TESTS: all.equal(apply(testC,c(1,5),sum),TAC); apply(testC[1,,,,],c(2,4),sum)
    }

    cat(".")

    if(y%in%upyrs){# Operate MP S P A Y M R

      if(y==upyrs[1]){ # if the first projection update do all residuals with AC (and calc these for years with interim observations)

        for(i in 1:nind){

          Isim[,i,nyears+(1:proyears),2]<-rnorm_T95(proyears*nsim,0, as.numeric(Istats[sid[i],3]))#lndev(proyears*nsim,as.numeric(Istats[sid[i],3]))         # matplot(t(Isim[,i,,2]),type='l')
          if(length(resyrs[[i]])>0){
            Isim[,i,resyrs[[i]],2]<-log(Isim[,i,resyrs[[i]],1])-log(VBi[,resyrs[[i]],i]*newq[i]) # matplot(t(Isim[,i,,2]),type='l')
            Isim[,i,max(resyrs[[i]]):(nyears+proyears),2]<- apply_AC1(Isim[,i,max(resyrs[[i]]):(nyears+proyears),2],as.numeric(Istats[sid[i],4]))           # matplot(t(Isim[,i,,2]),type='l')
          }
        }
      }

      qmult=(1+OM@qinc/100)^(1:(y-nyears-1)) # accounting for q increases or decreases begining after nyears
      Iobs<-array(0,c(nsim,nind,y-1))
      Iobs[,,1:nyears]<-Isim[,,1:nyears,1] # real observations
      iInd<-as.matrix(expand.grid(1:nsim,1:nind,(nyears+1):(y-1),2)) # updates
      Iobs[iInd[,c(1,2,3)]]<-exp(log(VBi[iInd[,c(1,3,2)]]*newq[iInd[,2]])+Isim[cbind(iInd[,1:3],rep(2,nrow(iInd)))])*rep(qmult,each=nsim*nind)

      # if additional data are required
      if(y==nyears+MPlag){
        nuy<-nyears+1
      }else{
        nuy<-(upyrs[match(y,upyrs)-1]):(y-1)
      }

      for(AS in 1:nAss){

        AA<-Assess_data[AS,]
        nA<-sum(AA)

        Cobs<-array(NA,c(nsim,y-3))
        Cobs[,1:nyears]<-Cobs_hist[,AS,] # copy over all catch before projection
        upind<-(nyears+1):(y-3) # copy over all catch since projection

        if(length(upind)>0){
          Cobs[,upind]<-apply(array(C[,,,upind,,AA,],c(nsim,npop,nages,length(upind),nsubyears,nA,nfleets))*array(Wt_age[,,,nyears],c(nsim,npop,nages,length(upind),nsubyears,nA,nfleets)),c(1,4),sum,na.rm=T)*.Object@Cerr[,upind]
        }

        dset[[AS]]<-list("Cobs"=cbind(Cobs,.Object@TAC[,MP,AS,y-nyears-1]),
                         "Iobs"=Iobs[,,1:(y-2)],
                         "K"=OM@Kmu[,AS]*.Object@Kb,        # for now these assume same growth by stock
                         "Linf"=OM@Linfmu[,AS]*.Object@Kb,  # for now these assume same growth by stock
                         "t0"=OM@t0[,AS],                   # no error in t0
                         "M"=OM@M[,AS,,(y-2)]*.Object@Mb,
                         "a"=rep(OM@a,nsim),
                         "b"=rep(OM@b,nsim),
                         "nages"=OM@nages,
                         "ageM"=OM@ageM[,AS]*.Object@ageMb,
                         "Mat"=OM@mat[,AS,,nyears],
                         "Bt_PI"=apply(N[,,,y-1,nsubyears,AA]*
                                         array(Wt_age[,,,nyears],c(nsim,npop,nages,nA)),1,sum,na.rm=T),
                         "Bty_PI"=apply(N[,,,1:(y-1),nsubyears,AA]*
                                          array(Wt_age[,,,nyears],c(nsim,npop,nages,y-1,nA)),c(1,4),sum,na.rm=T),
                         "VBty_PI"=apply(N[,,4:nages,1:(y-1),nsubyears,AA]*
                                           array(Wt_age[,,4:nages,nyears],c(nsim,npop,nages-3,y-1,nA)),c(1,4),sum,na.rm=T),
                         "MPrec"=TAC[,AS],
                         "TAC"=matrix(.Object@TAC[,MP,AS,1:(y-nyears)],ncol=(y-nyears),nrow=nsim),
                         "curTAC"=rep(TAC2020[AS],nsim),
                         "TH"=TH
        )
      } # end of assessment area

      TACtrial<-array(NA,c(nsim,nAss))

      for(AS in 1:nAss){
        #SPAYMRF
        AA<-Assess_data[AS,]

        assign("dset",dset,envir=globalenv()) # debugging
        if(sfIsRunning())sfExport("dset")
        if(class(get(MPsa[[MP]][AS]))=="MP"){
          if(sfIsRunning()&!MSEparallel){
            TACtrial[,AS]<-sfSapply(1:nsim,get(MPsa[[MP]][AS]),dset[[AS]])
          }else{
            TACtrial[,AS]<-sapply(1:nsim,get(MPsa[[MP]][AS]),dset[[AS]])
          }
        }else if(class(get(MPsa[[MP]][AS]))=="MSMP"){
          if(sfIsRunning()&!MSEparallel){
            TACtrial[,AS]<-sfSapply(1:nsim,get(MPsa[[MP]][AS]),dset,AS=AS)
          }else{
            TACtrial[,AS]<-sapply(1:nsim,get(MPsa[[MP]][AS]),dset,AS=AS)
          }
        }

        if(MPsa[[MP]][AS]!="ZeroC"){
          TACmax=(1+maxTAC[AS])*TAC[,AS]
          TACmin=(max(0.01,1-maxTAC[AS]))*TAC[,AS]
          cond=TACtrial[,AS]<TACmin
          TACtrial[cond,AS]=TACmin[cond]
          cond=TACtrial[,AS]>TACmax
          TACtrial[cond,AS]=TACmax[cond]
        }

        if(y<allyears).Object@TAC[,MP,AS,y-nyears+1]<-TAC[,AS]<-TACtrial[,AS]

      }

      testC[testCind]<-TAC[testCind[,c(1,5)]]*TACdist[testCind] # predicted catch by TAC
      aggC<-apply(testC,1:4,sum) #nsim, nsubyears, nareas, nfleets


    }else{ # if !(y%in$upyrs)

      if(y>(nyears+MPlag)).Object@TAC[,MP,,y-nyears+1]<-.Object@TAC[,MP,,y-nyears] # TAC for next year

    } # end of upyrs

    SPAYMR[,4]<-y
    SPAYMRF2[,4]<-y
    SPAY<-SPAYMR[,1:4]
    SPAY2<-SPAYMRF2[,1:4]
    SFAY2<-SPAYMRF2[,c(1,7,3,4)]


    # =========================================================================================================================================================================

    # =========================================================================================================================================================================

    # =========================================================================================================================================================================


    for(m in 1:nsubyears){
      #m<-1 #  m<-m+1

      SPAYMR[,5]<-m
      SPAM<-SPAYMR[,c(1:3,5)]
      SPAYMRF2[,5]<-m
      SFYMR2<-SPAYMRF2[,c(1,7,4:6)]
      SPAYMR2<-SPAYMRF2[,1:6]

      if(m==1){
        N[,,,y,m,]<-N[,,,y-1,nsubyears,]*exp(-Z[,,,y-1,nsubyears,])
      }else{
        N[,,,y,m,]<-N[,,,y,m-1,]*exp(-Z[,,,y,m-1,])
      }

      # move fish spaymrr
      mi<-movIndex[y]
      N[,,,y,m,]<-domov(N[,,,y,m,],mov[,,,mi,m,,])

      Biomass[,,,y,m,]<-N[,,,y,m,]*array(Wt_age[,,,nyears],c(nsim,npop,nages,nareas))

      Btemp<-apply(Biomass[,,,y,m,],c(1,4),sum)

      if(Reallocate){
        for(AS in 1:nAss){ # Max F redistribution at the catch-at-numbers scale

          AA<-Assess_data[AS,]
          testU<-aggC[,m,AA,]/array(Btemp[,AA],dim(aggC[,m,AA,])) # implied harvest rate
          cond<-testU>0.9
          cond[is.na(cond)]<-T
          Cunder<-array(0,c(nsim,sum(AA),nfleets))
          Cunder[cond]<-aggC[,m,AA,][cond]*(testU[cond]-0.9)/testU[cond]
          aggC[,m,AA,][cond]<-aggC[,m,AA,][cond]-Cunder[cond]
          CunderT<-apply(Cunder,1,sum)
          Cdist<-array(0,c(nsim,sum(AA),nfleets))
          Cdist[!cond]<-aggC[,m,AA,][!cond]
          Cdist<-(Cdist/array(apply(Cdist,1,sum,na.rm=T),c(nsim,sum(AA),nfleets)))*array(CunderT,c(nsim,sum(AA),nfleets))
          aggC[,m,AA,]<-aggC[,m,AA,]+Cdist

        }
      }

      testU<-aggC[,m,,]/array(Btemp,dim(aggC[,m,,])) # implied harvest rate
      testC2<-do.call(IE,list(testU))*array(Btemp,dim(aggC[,m,,]))

      CAdist[SPRFA2]<-N[SPAYMR2]*Wt_age[SPAL]*sel[SPAF2] # predicted vulnerable biomass each strata
      CAdist[CAdist==0]<-tiny # you have to do this otherwise zero fish can lead to missing catches
      CAdistsum<-apply(CAdist,c(1,3,4),sum)                # total in each sim, region and fleet

      CAdist[SPRFA2]<-CAdist[SPRFA2]/CAdistsum[SPRFA2[,c(1,3,4)]] # fraction in each stock and age class per sim region and fleet
      CAdist[is.na(CAdist)]<-0

      C[SPAYMRF2]<-testC2[SRF2]*CAdist[SPRFA2]
      C[SPAYMRF2][is.na(C[SPAYMRF2])]<-0

      C[SPAYMRF2]<-C[SPAYMRF2]/Wt_age[SPAL] # divide by weight to get numbers

      Up<-C[,,,y,m,,]/array(N[,,,y,m,],c(nsim,npop,nages,nareas,nfleets)) # harvest rate disaggregated by age
      Up[is.na(Up)|Up<tiny]<-tiny # otherwise you can't generate some of the automatic fishery data
      Up[Up>0.9]<-0.9  # 90% max U by age (this is where catches can go 'under' those specified)
      FM[SPAYMRF2]<-(-log(1-Up[SPARF2])) # get F

      Ftot<-apply(FM[,,,y,m,,],1:4,sum,na.rm=T)
      Z[SPAYMR]<-Ftot[SPAR]+M[SPAY]/nsubyears


# ======================================================================================================================================

      if(doGT) GT<-temp<-calc_GT(GT=GT,y=y, m=m, N=N, FM=FM, M=M, mov=mov,
                           nsubyears=nsubyears, movIndex=movIndex, nsim=nsim,
                           nages=nages,npop=npop,nyears=nyears,nareas=nareas,nfleets=nfleets)

      for(pp in 1:npop){

        SSB[,pp,,y,m,]<-N[,pp,,y-1,m,]*array(Wt_age[,pp,,nyears]*mat[,pp,,nyears],dim=c(nsim,nages,nareas))

        if(Recsubyr[pp]==m){

          SSBtemp<-apply(SSB[,pp,,y,m,],c(1,3),sum)*canspawn[,pp,] # viable spawning biomass
          spawnr<-SSBtemp/array(apply(SSBtemp,1,sum),dim(SSBtemp))
          N[,pp,nages,y,m,]<-N[,pp,nages,y,m,]+N[,pp,nages-1,y,m,] # plus group
          N[,pp,2:(nages-1),y,m,]<-N[,pp,1:(nages-2),y,m,]
          maxind<-min(y-nyears+1,dim(OM@Recind)[2])
          SRno<-OM@Recind[pp,maxind]
          R0<-OM@Recpars[,SRno,2]
          R0_proj[pp,y]<-R0[1] # record projected R0
          SSB0=R0*SSBpR[,pp]    #// Unfished Spawning Stock Biomass
          SSBt<-apply(SSB[,pp,,y,m,],1,sum)
          SSB_proj[MP,,pp,y]<-SSBt

          if(OM@Rectype[SRno]=="BH"){

            h<- OM@Recpars[,SRno,1]
            N[,pp,1,y,m,]<-exp(Pe[,pp,y])*spawnr*((0.8*R0*h*SSBt) / (0.2*SSBpR[,pp]*R0*(1-h) + (h-0.2)*SSBt))
            Rec_err[MP,,pp,y]<-apply(N[,pp,1,y,m,],1,sum) # Record Stochastic Recruitment
            Rec_mu[MP,,pp,y]<-Rec_err[MP,,pp,y]/exp(Pe[,pp,y]) # Record Mean Recruitment

          }else{ # hockey stick

            inflect<-OM@Recpars[,SRno,1]
            N[,pp,1,y,m,]<-exp(Pe[,pp,y])*spawnr*R0
            cond<-SSBt<(SSB0*inflect)
            N[cond,pp,1,y,m,]<-N[cond,pp,1,y,m,]*SSBt[cond]/(SSB0[cond]*inflect[cond])

          }

        } # if its the right subyear


      } # end of pop

    } # end of subyear

    BBd<-N[,,,y,,]*rep(Wt_age[,,,1],nareas*nsubyears)
    BBa[MP,,,nHyears+y]<-apply(BBd[,,,2,],1:2,sum)
    BB[MP,,1,nHyears+y]<-apply(BBd[,,,2,4:7],1,sum)
    BB[MP,,2,nHyears+y]<-apply(BBd[,,,2,1:3],1,sum)

  } # end of year
















