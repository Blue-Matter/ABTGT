
# Development code for ABTGT
library(PerformanceAnalytics)
library(mc2d) # for vectorized  array-based rmultinom
library(ABTMSE)
loadABT()

setwd("C:/GitHub/ABTGT") # laptop
setwd("C:/Users/tcarruth/Documents/GitHub/ABTGT") # workstation

for (fl in list.files("./ABTGT/R/")) source(file.path("./ABTGT/R/", fl)) # load source code and formatted data


OM=OM_1t
MPs=list(c("U5","U5"))
TAC2019=c(32240000,2350000)
TAC2020=c(36000000,2179000)
TAC2021=c(36000000,2350000)
TAC2022=c(36000000,2350000)
Allocation=ABTMSE:::Allocation
MPareas=NA
Fdistyrs=3
maxTAC=c(10,10)
MSEparallel=F
check=FALSE
Reallocate=TRUE
GT=NULL


GT <- make_GT(OM_1t,nT=10000)
object.size(GT)/1E6 # megabytes big

setMethod("initialize", "MSE", function(.Object,OM=OM_example,MPs=list(c("U5","U5")),
                                        TAC2019=c(32240000,2350000),TAC2020=c(36000000,2179000),
                                        TAC2021=c(36000000,2350000),TAC2022=c(36000000,2350000),
                                        Allocation=ABTMSE:::Allocation,MPareas=NA,Fdistyrs=3,maxTAC=c(10,10),MSEparallel=F,
                                        check=FALSE,Reallocate=TRUE,GT=NULL){

.Object});
.Object<-new('MSE');
.Object@Snames<-OM@Snames

doGT<-!is.null(GT)  # are Gene tagging calculations to be carried out?

IE<-OM@IE
Obs<-get(OM@Obs)
interval=OM@interval
Deterministic=OM@Deterministic

# Auto-correlation in recrutiment deviations is currently disabled
set.seed(OM@seed)

if(class(OM)!='OM'){
  print(paste('Could not run MSE:',deparse(substitute(OMd)),'not of class OM'))
  stop()
}
if(class(Obs)!='Obs'){
  print(paste('Could not run MSE:',deparse(substitute(Obs)),'not of class Obs'))
  stop()
}
if(class(get(MPs[[1]][1]))!='MP'& class(get(MPs[[1]][1]))!='MSMP'){
  print(paste('Could not run MSE:',deparse(substitute(MPs[[1]][1])),'not of class MP'))
  stop()
}
if(class(get(IE))!='IE'){
  print(paste('Could not run MSE:',deparse(substitute(IE)),'not of class IE'))
  stop()
}

MPsa<-append(list(c("ZeroC","ZeroC")),MPs) # make sure a zeroC reference MP is included




# copy over dimensions ------
dimslots<-slotNames(OM)[1:18]
for(i in 1:18)slot(.Object,dimslots[i])<-slot(OM,dimslots[i])
.Object@Istats<-OM@Istats

# All MSY operating model quantities
.Object@MSY<-OM@MSY
.Object@BMSY<-OM@BMSY
.Object@SSBMSY<-OM@SSBMSY
.Object@UMSY<-OM@UMSY
.Object@FMSYa<-OM@FMSYa
.Object@SSBMSY_SSB0<-OM@SSBMSY_SSB0
.Object@SSBpR<-OM@SSBpR

cat("Constructing arrays")
cat("\n")
flush.console()

# Dimensions  S P A Y M R
nsim<-OM@nsim
npop<-OM@npop
nyears<-OM@nyears
nHyears<-OM@nHyears
proyears<-OM@proyears
nages<-OM@nages
nsubyears<-OM@nsubyears
nareas<-OM@nareas
nfleets<-OM@nfleets
allyears<-nyears+proyears
nMPs<-length(MPsa)
.Object@nMPs<-nMPs
nlen<-OM@nlen
lenbins<-OM@lenbins
mulen<-OM@mulen
Wt_age<-OM@Wt_age
nydist<-OM@nydist
mat<-OM@mat
mov<-OM@mov
movIndex<-OM@movIndex
Recsubyr<-OM@Recsubyr
Recdevs<-OM@Recdevs
SSBpR<-OM@SSBpR
HCobs<-OM@HCobs

M<-OM@M
Mtemp<-array(0,dim(OM@M))
Mtemp[,,2:nages,]<-OM@M[,,1:(nages-1),]

surv=tomt(exp(-apply(Mtemp[,,,1],2:1,cumsum)))
surv[,,nages]<-surv[,,nages]+surv[,,nages]*exp(-Mtemp[,,nages,1])/(1-exp(-Mtemp[,,nages,1]))

rm(Mtemp); invisible(gc())

BB<-BBa<-CW<-CWa<-array(NA,c(nMPs,nsim,npop,allyears+nHyears))

N<-SSB<-BBd<-Z<-array(NA,c(nsim,npop,nages,allyears,nsubyears,nareas)) # only need aggregated catch for these purposes
FD<-array(NA,c(nsim,nfleets,nyears,nsubyears,nareas))              # Fishing distribution
Fdist<-array(NA,c(nsim,npop,nfleets,nareas))
C<-array(NA,c(nsim,npop,nages,allyears,nsubyears,nareas,nfleets))
#VB<-array(0,c(nsim,allyears,nsubyears,nareas,nfleets)) # VB now only done for indices because it is computationally costly
CA<-array(NA,c(nsim,npop,allyears,nsubyears,nareas))
NLA<-array(NA,c(nsim,nages,nlen,nareas)) # temporary numbers at length x age for vulnerable biomass calculation
NLAa<-array(NA,c(nsim,nages,nlen)) # temporary numbers at length x age for vulnerable biomass calculation

hFAT<-array(NA,c(nsim,nHyears,nsubyears,nages,nareas))
hZ<-array(NA,c(nsim,npop,nages,nHyears,nsubyears,nareas))

mref<-c(2:nsubyears,1)  # movement reference
y<-1
m<-1

# Calculating F arrays ----------------------------------------------
cat("Calculating historical fishing mortality rate at length (computationally intensive)")
cat("\n")
iALK<-OM@iALK

FML<-array(NA,c(nsim,npop,nlen,allyears,nsubyears,nareas,nfleets))
FM<-array(NA,c(nsim,npop,nages,allyears,nsubyears,nareas,nfleets))
Ftemp<-array(NA,c(nsubyears,nfleets,nareas,nages,nlen))
Ftind<-TEG(dim(Ftemp))
nFt<-nrow(Ftind)

isMLE<-all.equal(OM@hR0[1,,],OM@hR0[2,,])

for(y in 1:nyears){

  FLind<-as.matrix(expand.grid(1:nsim,1:npop,1:nlen,y,1:nsubyears,1:nareas,1:nfleets))
  FML[FLind]<-OM@qE[FLind[,c(1,7)]]*OM@sel[FLind[,c(1,7,3)]]*OM@E[FLind[,c(1,7,4,5,6)]]*OM@Fmod[FLind[,c(1,6,5)]]*OM@FDY[FLind[,c(1,4,5,6)]]
  rm(FLind); invisible(gc()) # delete F index

  for(s in 1:nsim){
    for(p in 1:npop){

      if(!isMLE|(isMLE & s==1)){
        FMLind<-cbind(rep(s,nFt),rep(p,nFt),Ftind[,5],rep(y,nFt),Ftind[,c(1,3,2)]) # s p l m r f
        iALKind<-cbind(rep(s,nFt),rep(p,nFt),rep(y,nFt),Ftind[,4:5]) # s p y a l
        Ftemp[Ftind]<-FML[FMLind]*iALK[iALKind]
        FM[s,p,,y,,,]<-aperm(apply(Ftemp,1:4,sum),c(4,1,3,2)) #[m f r a]  to [a m r f]
      }else{
        FM[s,p,,y,,,]<-FM[1,p,,y,,,] # copy sim 1 if MLE reconstruction
      }

    }
  }

}
FML[is.na(FML)]<-0
FM[is.na(FM)]<-0

# Calculation of weight at length (for recreating VB)
wl<-array(NA,c(npop,nlen))
for(pp in 1:npop)wl[pp,]<-OM@a[pp]*OM@mulen^OM@b[pp]


# Calculation of selectivity at age for each fleet
sel<-array(NA,c(nsim,npop,nages,nfleets))

for(ff in 1:nfleets){
  temparr<-array(NA,c(nsim,npop,nages,nlen))
  iALKind<-as.matrix(expand.grid(1:nsim,1:npop,nyears,1:nages,1:nlen))
  selind<-cbind(iALKind[,1],rep(ff,nrow(iALKind)),iALKind[,5])
  temparr[iALKind[,c(1,2,4,5)]]<-iALK[iALKind]*OM@sel[selind]
  temparr<-apply(temparr,1:3,sum)
  sel[,,,ff]<-temparr/array(apply(temparr,1:2,max),dim(temparr))
}

rm(temparr,iALKind); invisible(gc())

# Setting up index simulation -----------------------------------------

nind<-max(Obs@MPind$No)
Index_areas<-array(FALSE,c(nind,nareas))
Istats<-OM@Istats
.Object@Inames<-as.character(unique(Obs@MPind$Name)) # Index names in the order they are simulated
if(Deterministic)Istats[,3]<-0
Ires<-OM@Ires
Isim<-array(NA,c(nsim,nind,nyears+proyears,2)) # 1 is the index value, 2 is the residual
lastI<-array(NA,c(nsim,nind))
lastobs<-rep(NA,nind)
histyrs<-list() # historical years of the index
resyrs<-list()  # stochastic residual years
sid<-MPQ<-MParea<-newq<-rep(NA,nind) # the correct index of the Istats and Ires slots in the OM object
VB_index<-rep(F,nind)
MPFleet<-rep(NA,nind)
VN_index<-rep(F,nind)

for(i in 1:nind){
  idd<-subset(Obs@MPind,Obs@MPind$No==i & Obs@MPind$Year<=(OM@nyears+3)) # include up to 2019 observations
  if(grepl('Fleet',idd$Fleet[1])){  # is it a fleet vulnerability index?
    VB_index[i]<-T
    MPFleet[i]<-as.numeric(strsplit(as.character(idd$Fleet[1]),"_")[[1]][2])
    if(length(strsplit(as.character(idd$Fleet[1]),"_")[[1]])==3)VN_index[i]<-T
  }
}


# Initializing the simulation ----------------------------------------------
cat("Initializing simulations")
cat("\n")

SFAYMR<-as.matrix(expand.grid(1:nsim, 1:nfleets,1:nages,y,m,1:nareas)) # Set up some array indexes
SFAY<-SFAYMR[,1:4]

SPAYMR<-as.matrix(expand.grid(1:nsim,1:npop,1:nages,y,m,1:nareas))     # Set up some array indexes
SARP<-SPAYMR[,c(1,3,6,2)]
SPA<-SPAYMR[,1:3]
SPR<-SPAYMR[,c(1,2,6)]
SPMR<-SPAYMR[,c(1,2,5,6)]
SP<-SPAYMR[,1:2]
SA<-SPAYMR[,c(1,3)]
SAR<-SPAYMR[,c(1,3,6)]
SPAR<-SPAYMR[,c(1:3,6)]
SPAY<-SPAYMR[,1:4]
SPAM<-SPAYMR[,c(1:3,5)]


# New model initialization -----------------------

# Recruitment calculation ---

LTyrs<-4 # Lower triangle (recent recruitment years) #!!! currently disused

nSR<-length(OM@Rectype)
Reccv<-AC<-array(NA,dim(OM@Reccv))
for(s in 1:nrow(OM@Reccv)){ # has to be by simulation because these were different in some previous OMs
  for(SR in 1:nSR){
    out<-solveforR1(OM@Reccv[s,SR]^2,OM@AC[s,SR]) # all are currently positive - !!! need to add exception for negative !!!
    Reccv[s,SR]<-out[1]^0.5
    AC[s,SR]<-out[2]
  }
}

if(Deterministic){
  Reccv[]<-0
  AC[]<-0
}

.Object@Reccv<-Reccv
.Object@AC<-AC

Pe<-array(NA,c(nsim,npop,allyears))
Pe[,,nyears]<-log(OM@Recdevs[,,nyears]) # !!! we are assuming that the 2-block final residual is equivalent to the annual residual
for(s in 1:nsim){
  for(pp in 1:2){
    for(y in (nyears+1):allyears){
      SR<-OM@Recind[pp,y-nyears] # has to be able to deal with AC and SD switching!
      #Pe_UC[s,pp,y]<-lndev(1,Reccv[s,SR]) # uncorrelated log normal deviation (currently now just for monitoring)
      #Pe[s,pp,y]<-apply_AC1_vec(Pe_UC[s,pp,(y-1):y],AC[s,SR])[2] #
      autocor <- AC[s,SR]
      #if(SR!=SRprevious){ autocor <- 0 ; SRprevious <- SR }  ### If there is a regime shift in Rec, you may also want to break the autocorrelation between the Rec residuals at that point; if you don't want to break the autocorrelation in Rec  residuals, then don't include this line
      Pe[s,pp,y] <- autocor*Pe[s,pp,y-1] + ((1-autocor^2)^0.5)* rnorm_T95(n=1, mean=0, sd=Reccv[s,SR]) - (1-autocor)* (Reccv[s,SR]^2)/2

    }
  }
}

#OM@Recdevs[,,nyears+(-(LTyrs-1):0)]<-Pe[,OM@Recind[,1],1:LTyrs] # lower triangle are randomly generated - now just using the real values as we have indices in teh east that pick up small fish

Rec<-array(NA,c(nsim,npop,nyears))  #

stemp<-array(1/nareas,dim=c(nsim,npop,nsubyears,nareas))
movi<-mov[,,nages,1,,,] # sim, pop, season, from, to

for(y in 1:20){
  for(m in 1:nsubyears){
    if(m==1){
      stemp[,,m,]<-apply(array(rep(stemp[,,nsubyears,],nareas)*movi[,,m,,],c(nsim,npop,nareas,nareas)),c(1,2,4),sum)
    }else{
      stemp[,,m,]<-apply(array(rep(stemp[,,m-1,],nareas)*movi[,,m,,],c(nsim,npop,nareas,nareas)),c(1,2,4),sum)
    }
  }
}

indN<-as.matrix(expand.grid(1:nsim,1:npop,1:nages,1,1:nsubyears,1:nareas))
R0ind<-cbind(indN[,1:2],rep(1,nrow(indN)))
N[indN]=OM@hR0[R0ind]*surv[indN[,1:3]]*stemp[indN[,c(1,2,5,6)]]

SSB[,,,1,,]<-N[,,,1,,]*rep(Wt_age[,,,1],nareas*nsubyears)*rep(mat[,,,1],nareas*nsubyears)
BBd<-N[,,,1,,]*rep(Wt_age[,,,1],nareas*nsubyears)
BBa[,,,1]<-rep(apply(BBd[,,,2,],1:2,sum),each=nMPs)
BB[,,1,1]<-rep(apply(BBd[,,,2,4:7],1,sum),each=nMPs)
BB[,,2,1]<-rep(apply(BBd[,,,2,1:3],1,sum),each=nMPs)

sdur<-1/nsubyears
canspawn<-array(rep(c(0,1,0,1,0,0,0,0,0,0,0,0,1,0),each=nsim),c(nsim,npop,nareas))
hM<-array(M[,,,1],c(nsim,npop,nages,nareas))
spawnr<-array(NA,c(nsim,npop,nareas))

# Preallocated arrays
Rec_mu <- Rec_err <- SSB_proj<-array(NA,c(nMPs,nsim,npop,allyears))
R0_proj <- array(NA,c(npop,allyears))

for(y in 2:nHyears){
  mi<-movIndex[1]
  for(m in 1:nsubyears){

    if(m==1){ # first subyear

      Ntemp<-apply(N[,,,1,nsubyears,]*exp(-hM*sdur/2),c(1,3,4),sum,na.rm=T)

      Ntemp[Ntemp==0]<-tiny # to avoid zero catches divided by zero numbers
      Htemp<-array(rep(HCobs[y-1,nsubyears,,],each=nsim),c(nsim,nages,nareas))/Ntemp
      Htemp[Htemp>0.9]<-0.9
      #for(pp in 1:np)HC[,pp,y,m]<-Htemp[pp,,]*N[,pp,,1,m,]
      hFAT[,y-1,nsubyears,,]<--log(1-Htemp)
      hZind<-as.matrix(expand.grid(1:nsim,1:npop,1:nages,y-1,nsubyears,1:nareas))
      hFATind<-hZind[,c(1,4,5,3,6)]
      hMind<-hZind[,c(1,2,3,6)]
      hZ[hZind]<-hFAT[hFATind]+hM[hMind]*sdur
      N[,,,1,m,]<-N[,,,1,nsubyears,]*exp(-hZ[,,,y-1,nsubyears,])
      N[,,,1,m,]<-domov(N[,,,1,m,],mov[,,,mi,m,,])
      SSB[,,,1,m,]<-N[,,,1,m,]*rep(Wt_age[,,,1],nareas)*rep(mat[,,,1],nareas)

    }else if(m==2){ # spawning subyear

      SSBs<-apply(N[,,,1,m,]*rep(Wt_age[,,,1],nareas)*rep(mat[,,,1],nareas),c(1:2,4),sum)
      SSBt<-apply(SSBs,1:2,sum)

      for(pp in 1:npop){
        SSBtemp<-SSBs[,pp,]*canspawn[,pp,] # viable spawning biomass
        spawnr[,pp,]<-SSBtemp/array(apply(SSBtemp,1,sum),dim(SSBtemp)) # s p r
      }

      Ntemp<-apply(N[,,,1,m-1,]*exp(-hM*sdur/2),c(1,3,4),sum,na.rm=T)
      Ntemp[Ntemp==0]<-tiny
      Htemp<-array(rep(HCobs[y,m-1,,],each=nsim),c(nsim,nages,nareas))/Ntemp
      Htemp[Htemp>0.9]<-0.9
      hFAT[,y,m-1,,]<--log(1-Htemp)
      hZind<-as.matrix(expand.grid(1:nsim,1:npop,1:nages,y,m-1,1:nareas))
      hFATind<-hZind[,c(1,4,5,3,6)]
      hMind<-hZind[,c(1,2,3,6)]
      hZ[hZind]<-hFAT[hFATind]+hM[hMind]*sdur
      N[,,,1,m,]<-N[,,,1,m-1,]*exp(-hZ[,,,y,m-1,])
      N[,,,1,m,]<-domov(N[,,,1,m,],mov[,,,mi,m,,])
      SSB[,,,1,m,]<-N[,,,1,m,]*rep(Wt_age[,,,1],nareas)*rep(mat[,,,1],nareas)

      N[,,nages,1,m,]<-N[,,nages,1,m,]+N[,,nages-1,1,m,] # plus group
      N[,,2:(nages-1),1,m,]<-N[,,1:(nages-2),1,m,]

      for(pp in 1:npop){

        SSB0=OM@hR0[,pp,1]*SSBpR[,pp]    #// Unfished Spawning Stock Biomass
        R0=OM@hR0[,pp,1]

        if(OM@hRectype[pp,1]=="BH"){

          h<-OM@hRecpar[,pp,1]
          N[,pp,1,1,m,]<-spawnr[,pp,]*(    (0.8*R0*h*SSBt[,pp]) / (0.2*SSBpR[,pp]*R0*(1-h) + (h-0.2)*SSBt[,pp]))

        }else{ # hockey stick

          inflect<-OM@hRecpar[,pp,1]
          N[,pp,1,1,m,]<-spawnr*R0
          cond<-SSBt[,pp]<(SSB0*inflect)
          N[cond,pp,1,1,m,]<-N[cond,pp,1,1,m,]*SSBt[cond,pp]/(SSB0[cond]*inflect[cond])

        }

      }

      BBd<-N[,,,1,,]*rep(Wt_age[,,,1],nareas*nsubyears)
      BBa[,,,y]<-rep(apply(BBd[,,,2,],1:2,sum),each=nMPs)
      BB[,,1,y]<-rep(apply(BBd[,,,2,4:7],1,sum),each=nMPs)
      BB[,,2,y]<-rep(apply(BBd[,,,2,1:3],1,sum),each=nMPs)

    }else{   # after spawning subyear

      Ntemp<-apply(N[,,,1,m-1,]*exp(-hM*sdur/2),c(1,3,4),sum,na.rm=T)
      Ntemp[Ntemp==0]<-tiny
      Htemp<-array(rep(HCobs[y,m-1,,],each=nsim),c(nsim,nages,nareas))/Ntemp
      Htemp[Htemp>0.9]<-0.9
      hFAT[,y,m-1,,]<--log(1-Htemp)
      hZind<-as.matrix(expand.grid(1:nsim,1:npop,1:nages,y,m-1,1:nareas))
      hFATind<-hZind[,c(1,4,5,3,6)]
      hMind<-hZind[,c(1,2,3,6)]
      hZ[hZind]<-hFAT[hFATind]+hM[hMind]*sdur
      N[,,,1,m,]<-N[,,,1,m-1,]*exp(-hZ[,,,y,m-1,])
      N[,,,1,m,]<-domov(N[,,,1,m,],mov[,,,mi,m,,])
      SSB[,,,1,m,]<-N[,,,1,m,]*rep(Wt_age[,,,1],nareas)*rep(mat[,,,1],nareas)

    }# End of if subyear
  }  # end of subyear

}    # end of SRA year


rm(hFAT); rm(hZ); rm(hFATind); rm(hZind); invisible(gc())

# Run historical simulation ----------------------------------------------
cat("Running historical simulations")
cat("\n")

y<-1
m<-1

SPAYMRF2<-as.matrix(expand.grid(1:nsim,1:npop,1:nages,y,m,1:nareas,1:nfleets))
SPAYRF2<-SPAYMRF2[,c(1:4,6,7)]
SF2<-SPAYMRF2[,c(1,7)]
SPAY2<-SPAYMRF2[,1:4]
SFAY2<-SPAYMRF2[,c(1,7,3,4)]
SFYMR2<-SPAYMRF2[,c(1,7,4,5,6)]
SPAYMR2<-SPAYMRF2[,1:6]
SFA2<-SPAYMRF2[,c(1,7,3)]
SFAR2<-SPAYMRF2[,c(1,7,3,6)]
SFAYR2<-SPAYMRF2[,c(1,7,3,4,6)]
SPARF2<-SPAYMRF2[,c(1:3,6,7)]
SPAF2<-SPAYMRF2[,c(1:3,7)]
SPRFA2<-SPAYMRF2[,c(1,2,6,7,3)] #
SPR2<-SPAYMRF2[,c(1,2,6)] # for projections only
SRF2<-SPAYMRF2[,c(1,6,7)]
SPAL<-cbind(SPAYMRF2[,c(1:3)],rep(nyears,nrow(SPAYMRF2)))

for(m in 1:nsubyears){

  SPAYMRF2[,5]<-m
  SPAYMR2<-SPAYMRF2[,1:6]
  Ftot<-apply(FM[,,,y,m,,],1:4,sum)
  Z[SPAYMR2]<-Ftot[SPAR]+M[SPAY]/nsubyears
  C[SPAYMRF2]<-N[SPAYMR2]*(1-exp(-Z[SPAYMR2]))*(FM[SPAYMRF2]/Z[SPAYMR2]) # Calculate catches

}

SPAYMR[,5]<-1
SPAYMRF2[,5]<-1
SPAYMR2<-SPAYMRF2[,1:6]

for(y in 2:nyears){

  SPAYMR[,4]<-y
  SPAY<-SPAYMR[,1:4]
  SPAYMRF2[,4]<-y
  SPAY2<-SPAYMRF2[,1:4]
  SFAY2<-SPAYMRF2[,c(1,7,3,4)]
  SFAYR2<-SPAYMRF2[,c(1,7,3,4,6)]
  SPAYRF2<-SPAYMRF2[,c(1:4,6,7)]

  for(m in 1:nsubyears){

    SPAYMR[,5]<-m
    SPAM<-SPAYMR[,c(1:3,5)]
    SPAYMRF2[,5]<-m
    SFYMR2<-SPAYMRF2[,c(1,7,4:6)]
    SPAYMR2<-SPAYMRF2[,1:6]

    if(m==1){
      N[,,,y,m,]<-N[,,,y-1,nsubyears,]*exp(-Z[,,,y-1,nsubyears,])
    }else{
      N[,,,y,m,]<-N[,,,y,m-1,]*exp(-Z[,,,y,m-1,])
    }

    # move fish
    mi<-movIndex[y]
    N[,,,y,m,]<-domov(N[,,,y,m,],mov[,,,mi,m,,])

    Ftot<-apply(FM[,,,y,m,,],1:4,sum)
    Z[SPAYMR]<-Ftot[SPAR]+M[SPAY]/nsubyears

    C[SPAYMRF2]<-N[SPAYMR2]*(1-exp(-Z[SPAYMR2]))*(FM[SPAYMRF2]/Z[SPAYMR2]) # Calculate catches

    for(pp in 1:npop){

      SSB[,pp,,y,m,]<-N[,pp,,y-1,m,]*array(Wt_age[,pp,,y]*mat[,pp,,y],dim=c(nsim,nages,nareas)) # note the 1 year lag

      if(Recsubyr[pp]==m){

        SSBtemp<-apply(SSB[,pp,,y,m,],c(1,3),sum)*canspawn[,pp,] # viable spawning biomass
        SSBt<-apply(SSB[,pp,,y,m,],1,sum)
        SSB_proj[1,,pp,y]<-SSBt
        spawnr<-SSBtemp/array(apply(SSBtemp,1,sum),dim(SSBtemp))
        N[,pp,nages,y,m,]<-N[,pp,nages,y,m,]+N[,pp,nages-1,y,m,] # plus group
        N[,pp,2:(nages-1),y,m,]<-N[,pp,1:(nages-2),y,m,]

        SSB0=OM@hR0[,pp,y]*SSBpR[,pp]    #// Unfished Spawning Stock Biomass
        R0=OM@hR0[,pp,y]
        R0_proj[pp,y]<-R0[1]

        if(OM@hRectype[pp,y]=="BH"){

          h<-OM@hRecpar[,pp,y]
          N[,pp,1,y,m,]<-OM@Recdevs[,pp,y]*spawnr*(    (0.8*R0*h*SSBt) / (0.2*SSBpR[,pp]*R0*(1-h) + (h-0.2)*SSBt))
          Rec_err[1,,pp,y]<-apply(N[,pp,1,y,m,],1,sum) # Record Stochastic Recruitment
          Rec_mu[1,,pp,y]<-Rec_err[1,,pp,y]/OM@Recdevs[,pp,y] # Record Mean Recruitment

        }else{ # hockey stick

          inflect<-OM@hRecpar[,pp,y]
          N[,pp,1,y,m,]<-spawnr*OM@Recdevs[,pp,y]*R0
          cond<-SSBt<(SSB0*inflect)
          N[cond,pp,1,y,m,]<-N[cond,pp,1,y,m,]*SSBt[cond]/(SSB0[cond]*inflect[cond])
        }

      } # if its the right subyear

      BBd<-N[,,,y,,]*rep(Wt_age[,,,1],nareas*nsubyears)
      BBa[,,,nHyears+y]<-rep(apply(BBd[,,,2,],1:2,sum),each=nMPs)
      BB[,,1,nHyears+y]<-rep(apply(BBd[,,,2,4:7],1,sum),each=nMPs)
      BB[,,2,nHyears+y]<-rep(apply(BBd[,,,2,1:3],1,sum),each=nMPs)

      # some very slow VB code - now done by index
      #for(ff in 1:nfleets){ # sum over ages and populations
      # this is where you got to
      # Nttind<-as.matrix(expand.grid(1:nsim,pp,1:nages,y,m,1:nareas,1:nlen))

      #NLA[Nttind[,c(1,3,7,6)]]<-N[Nttind[,1:6]]*iALK[Nttind[,c(1,2,4,3,7)]] # N x iALK gives numbers by age and length
      #BL<-apply(NLA,c(1,3,4),sum)*array(rep(wl[pp,],each=nsim),c(nsim,nlen,nareas)) # Biomass at length
      #VB[,y,m,,ff]<-VB[,y,m,,ff]+apply(BL*array(OM@sel[,ff,],c(nsim,nlen,nareas)),c(1,3),sum) # Vulnerable biomass for each fleet

      # VB[,y,m,,ff]<-VB[,y,m,,ff]+apply(N[,pp,,y,m,]*array(Wt_age[,pp,,nyears]*sel[,pp,,ff],c(nsim,nages,nareas)),c(1,3),sum) # wt_Age currently unchanging
      #}

    } # end of pop
  } # end of subyear
} # end of year


SSB0=array(OM@hR0[,,1],dim(surv))*apply(surv*Wt_age[,,,1]*mat[,,,1],1,sum)     #// Unfished Spawning Stock Biomass

SSBcur<-apply(N[,,,nyears,nsubyears,]*
                array(Wt_age[,,,nyears]*OM@mat[,,,nyears],c(nsim,npop,nages,nareas)),1:2,sum)

Bcur<-apply(N[,,,nyears,nsubyears,]*
              array(Wt_age[,,,nyears]*OM@mat[,,,nyears],c(nsim,npop,nages,nareas)),1:2,sum)

Biomass<-array(0,c(nsim,npop,nages,allyears,nsubyears,nareas))

Biomass[,,,1:nyears,,]<-N[,,,1:nyears,,]*array(Wt_age,c(nsim,npop,nages,nyears,nsubyears,nareas))

SSBall<-N*array(Wt_age,dim(N))*array(OM@mat,dim(N))
RAI<-apply(SSBall,c(1,4,5,6),sum)
RAI<-RAI[,1:nyears,,]
RAI<-RAI/array(apply(RAI,1,mean),dim(RAI))

# Generate observation errors ---------------------------------------------

.Object@Cimp<-runif(nsim,Obs@Ccv[1],Obs@Ccv[2])
.Object@Cb<-rep(Obs@Cbias,nsim)#trlnorm(nsim,1,Obs@Cbcv)

.Object@Cerr<-array(trlnorm(nsim*allyears,rep(.Object@Cb,allyears),rep(.Object@Cimp,allyears)),c(nsim,allyears))
.Object@Cerr[,nyears+(1:MPlag)]<-1 # TACs from 2017-2021 for example, are known perfectly

.Object@Iimp<-runif(nsim,Obs@Icv[1],Obs@Icv[2])
.Object@Ierr<-array(trlnorm(nsim*allyears,1,rep(.Object@Iimp,allyears)),c(nsim,allyears))
.Object@Ibeta<-exp(runif(nsim,log(Obs@Ibeta[1]),log(Obs@Ibeta[2])))

.Object@Btimp<-runif(nsim,Obs@Btcv[1],Obs@Btcv[2])
.Object@Btb<-trlnorm(nsim,1,Obs@Btbcv)
.Object@Bterr<-array(trlnorm(nsim*allyears,rep(.Object@Btb,allyears),rep(.Object@Btimp,allyears)),c(nsim,allyears))

.Object@Mb<-trlnorm(nsim,1,Obs@Mbcv)
.Object@Kb<-trlnorm(nsim,1,Obs@Kbcv)
.Object@Linfb<-trlnorm(nsim,1,Obs@Linfbcv)
.Object@t0b<-rep(1,nsim)

.Object@MSYb<-trlnorm(nsim,1,Obs@MSYbcv)
.Object@BMSYb<-trlnorm(nsim,1,Obs@BMSYbcv)
.Object@IMSYb<-trlnorm(nsim,1,Obs@IMSYbcv)
.Object@FMSYb<-trlnorm(nsim,1,Obs@FMSYbcv)
.Object@FMSY_Mb<-trlnorm(nsim,1,Obs@FMSY_Mbcv)

.Object@nCAAobs<-ceiling(runif(nsim,Obs@nCAAobs[1],Obs@nCAAobs[2]))

.Object@C<-array(NA,c(nMPs,nsim,npop,allyears))
.Object@CW<-array(NA,c(nMPs,nsim,npop,allyears))
.Object@CWa<-array(NA,c(nMPs,nsim,2,allyears))
.Object@CN<-array(NA,c(nMPs,nsim,npop,nareas,allyears)) #s p r y
.Object@B_BMSY<-array(NA,c(nMPs,nsim,npop,allyears))
.Object@F_FMSY<-array(NA,c(nMPs,nsim,npop,allyears))
.Object@D<-array(NA,c(nMPs,nsim,npop,allyears))
.Object@ageMb<-trlnorm(nsim,1,Obs@ageMbcv)
.Object@SSB<-array(NA,c(nMPs,nsim,npop,allyears))
.Object@SSBa<-array(NA,c(nMPs,nsim,npop,allyears))
.Object@VBi<-array(NA,c(nMPs,nsim,nind,allyears))
.Object@Iobs<-array(NA,c(nMPs,nsim,nind,allyears))


# Run projections ------------------------------------------------
cat("Running projections")
cat("\n")
if(sfIsRunning())sfExport(list=c("DD_i4","Islope1",
                                 "DD_i4_4010","CDD_i4","SPslope","DD",
                                 "DD_R","CDD","Fadapt","MeanC","tiny"),  namespace="ABTMSE")

upyrs<-(nyears+MPlag)+(0:(floor((OM@proyears-2)/interval)-1))*interval  # the years in which there are updates (every interval years)

CAdist<-array(NA,c(nsim,npop,nareas,nfleets,nages))

# Allocation / assessment vector -------------------------
if(is.na(MPareas[1]))MPareas<-c(rep(2,3),rep(1,nareas-3))
nAss<-max(MPareas)
Assess_data<-array(rep(MPareas,each=nAss)==rep(1:nAss,nareas),c(nAss,nareas)) # logical array for later calculations

# Catch observation error model ----
CobsCV<-array(NA,c(nsim,nAss))
Cobs_hist<-array(NA,c(nsim,nAss,nyears))
# s y a    #C[SPAYMRF2]
Ctemp<-apply(C[,,,1:nyears,,,]*array(Wt_age[,,,nyears],dim(C[,,,1:nyears,,,])),c(1,4,6),sum)

for(AS in 1:nAss){
  Cobs_hist[,AS,]<-array(rep(Ann_Cat[Ann_Cat[,2]==AS,3],each=nsim),c(nsim,nyears))
  CobsCV[,AS]<-apply(apply(Ctemp[,,Assess_data[AS,]],1:2,sum)/Cobs_hist[,AS,],1,sd)
}

#  1   2  3   4   5         6
# Name lnq sd AC1 Ilencat_LB Ilencat_UB
Iobs<-Isim[,,1:nyears,1]#Itemp1/array(apply(Itemp2,1:2,mean,na.rm=T),dim(Itemp2))                # normalize to mean 1 post residual error

# F distribution code (Allocation sums to 1 in East area, and West area),
Fdist1<-apply(FM[,,,(nyears-Fdistyrs+1):nyears,,,],c(1,5,6,7),sum)# s m r f  # F is the same for both stocks so summing makes no difference
Fdist<-array(0,c(nsim,nsubyears,nareas,nfleets)) # this is quarterly distribution by fleet and area based on Fdistyears of data

for(AS in 1:nAss){
  AA<-Assess_data[AS,]
  for(ff in 1:nfleets){
    sumq<-apply(Fdist1[,,AA,ff],c(1,3),sum,na.rm=T)
    Fdistind<-as.matrix(expand.grid(1:nsim,1:nsubyears,(1:nareas)[AA],ff))
    sumqind<-Fdistind
    sumqind[,3]<-sumqind[,3]-min(sumqind[,3])+1
    Fdist[Fdistind]<-Fdist1[Fdistind]/sumq[sumqind[,c(1,3)]]
  }
}
Fdist[is.na(Fdist)]<-0

testC<- TACdist<-array(0,c(nsim,nsubyears,nareas,nfleets,nAss))
testCind<-TEG(dim(testC))
for(AS in 1:nAss){
  AA<-Assess_data[AS,]
  nAA<-sum(AA)
  for(ff in 1:nfleets){
    # so, TAC is based on quarterly fraction x area fraction in each management area (which is in the object Allocation and calculated from the last three years of catches)
    TACdist[,,AA,ff,AS]<-Fdist[,,AA,ff]*array(rep(Allocation[AA,ff],each=nsim*nsubyears),c(nsim,nsubyears,nAA))
    # just a reminder, Allocation is a fraction of TAC by managment area so (west) sum(Allocation[1:3,])=1 and (east) sum(Allocation[4:7,])=1
  }
}
# auto adjust TACdist *to catch the < 1% of cases where strata are zeros (ie there is fishing distributed in Fdist that isn't in the allocation ff strata)
TACdist_adj<-1/apply(TACdist,c(1,5),sum) # summa
TACdist[testCind]<-TACdist[testCind]*TACdist_adj[testCind[,c(1,5)]]

MPdset<-new('list') # dataset by MP
dset<-new('list')

# Preallocated arrays

Itemp<-array(NA,c(nsim,nind,allyears,nareas))
.Object@TAC<-array(NA,c(nsim,nMPs,nAss,proyears+2))
.Object@TACtaken<-array(NA,c(nsim,nMPs,nAss,proyears+2))
.Object@TAC[,,,1]<-rep(TAC2019,each=nsim*nMPs)
.Object@TAC[,,,2]<-rep(TAC2020,each=nsim*nMPs)
.Object@TAC[,,,3]<-rep(TAC2021,each=nsim*nMPs)
.Object@TAC[,,,4]<-rep(TAC2022,each=nsim*nMPs) # MP lag =4


.Object@Fleet_comp<-array(NA,c(nsim,nMPs,nfleets,allyears,nages))
.Object@Fleet_cat<-array(NA,c(nsim,nMPs,nfleets,allyears))







# =========================================================================================================================================================================

# =========================================================================================================================================================================

MP<-1 #for(MP in 1:nMPs){

  set.seed(OM@seed)

  cat(paste0(paste0(MP,"/",nMPs," Running MSE for: "),paste0(MPsa[[MP]]," (",.Object@Snames,")",collapse="  ")))  # print a progress report
  cat("\n")
  flush.console()                                    # update the console

  #make_GT_arrays(doGT,GT,nsim,npop,nyears,nsubyears,nages) # makes:  TH[nT,nsim,npop,nyears,nsubyears]  TAL[nT,nsim,npop,nareas]  Tage[nT,nsim]

  y<-nyears #for(y in nyears:(nyears+proyears)){ # for(y in nyears:(upyrs[1]-1)){

    # y<-y+1; print(y)
    if(y==nyears){           # 2019 # 55
      TAC<-TACtrial<-array(rep(TAC2019,each=nsim),c(nsim,nAss))
    } else if (y==nyears+1){ # 2020 # 56
      TAC<-TACtrial<-array(rep(TAC2020,each=nsim),c(nsim,nAss))
    } else if (y==nyears+2){ # 2021 # 57
      TAC<-TACtrial<-array(rep(TAC2021,each=nsim),c(nsim,nAss))
    } else if (y==nyears+3){ # 2022 # 58
      TAC<-TACtrial<-array(rep(TAC2022,each=nsim),c(nsim,nAss))
    }

    if(y>=nyears & y<nyears+MPlag){
      testC[testCind]<-TAC[testCind[,c(1,5)]]*TACdist[testCind] # predicted catch by TAC
      aggC<-apply(testC,1:4,sum)
      #TESTS: all.equal(apply(testC,c(1,5),sum),TAC); apply(testC[1,,,,],c(2,4),sum)
    }

    cat(".")

    if(y%in%upyrs){# Operate MP S P A Y M R

      if(y==upyrs[1]){ # if the first projection update do all residuals with AC (and calc these for years with interim observations)

        for(i in 1:nind){

          Isim[,i,nyears+(1:proyears),2]<-rnorm_T95(proyears*nsim,0, as.numeric(Istats[sid[i],3]))#lndev(proyears*nsim,as.numeric(Istats[sid[i],3]))         # matplot(t(Isim[,i,,2]),type='l')
          if(length(resyrs[[i]])>0){
            Isim[,i,resyrs[[i]],2]<-log(Isim[,i,resyrs[[i]],1])-log(VBi[,resyrs[[i]],i]*newq[i]) # matplot(t(Isim[,i,,2]),type='l')
            Isim[,i,max(resyrs[[i]]):(nyears+proyears),2]<- apply_AC1(Isim[,i,max(resyrs[[i]]):(nyears+proyears),2],as.numeric(Istats[sid[i],4]))           # matplot(t(Isim[,i,,2]),type='l')
          }
        }
      }

      qmult=(1+OM@qinc/100)^(1:(y-nyears-1)) # accounting for q increases or decreases begining after nyears
      Iobs<-array(0,c(nsim,nind,y-1))
      Iobs[,,1:nyears]<-Isim[,,1:nyears,1] # real observations
      iInd<-as.matrix(expand.grid(1:nsim,1:nind,(nyears+1):(y-1),2)) # updates
      Iobs[iInd[,c(1,2,3)]]<-exp(log(VBi[iInd[,c(1,3,2)]]*newq[iInd[,2]])+Isim[cbind(iInd[,1:3],rep(2,nrow(iInd)))])*rep(qmult,each=nsim*nind)

      # if additional data are required
      if(y==nyears+MPlag){
        nuy<-nyears+1
      }else{
        nuy<-(upyrs[match(y,upyrs)-1]):(y-1)
      }

      for(AS in 1:nAss){

        AA<-Assess_data[AS,]
        nA<-sum(AA)

        Cobs<-array(NA,c(nsim,y-3))
        Cobs[,1:nyears]<-Cobs_hist[,AS,] # copy over all catch before projection
        upind<-(nyears+1):(y-3) # copy over all catch since projection

        if(length(upind)>0){
          Cobs[,upind]<-apply(array(C[,,,upind,,AA,],c(nsim,npop,nages,length(upind),nsubyears,nA,nfleets))*array(Wt_age[,,,nyears],c(nsim,npop,nages,length(upind),nsubyears,nA,nfleets)),c(1,4),sum,na.rm=T)*.Object@Cerr[,upind]
        }

        dset[[AS]]<-list("Cobs"=cbind(Cobs,.Object@TAC[,MP,AS,y-nyears-1]),
                         "Iobs"=Iobs[,,1:(y-2)],
                         "K"=OM@Kmu[,AS]*.Object@Kb,        # for now these assume same growth by stock
                         "Linf"=OM@Linfmu[,AS]*.Object@Kb,  # for now these assume same growth by stock
                         "t0"=OM@t0[,AS],                   # no error in t0
                         "M"=OM@M[,AS,,(y-2)]*.Object@Mb,
                         "a"=rep(OM@a,nsim),
                         "b"=rep(OM@b,nsim),
                         "nages"=OM@nages,
                         "ageM"=OM@ageM[,AS]*.Object@ageMb,
                         "Mat"=OM@mat[,AS,,nyears],
                         "Bt_PI"=apply(N[,,,y-1,nsubyears,AA]*
                                         array(Wt_age[,,,nyears],c(nsim,npop,nages,nA)),1,sum,na.rm=T),
                         "Bty_PI"=apply(N[,,,1:(y-1),nsubyears,AA]*
                                          array(Wt_age[,,,nyears],c(nsim,npop,nages,y-1,nA)),c(1,4),sum,na.rm=T),
                         "VBty_PI"=apply(N[,,4:nages,1:(y-1),nsubyears,AA]*
                                           array(Wt_age[,,4:nages,nyears],c(nsim,npop,nages-3,y-1,nA)),c(1,4),sum,na.rm=T),
                         "MPrec"=TAC[,AS],
                         "TAC"=matrix(.Object@TAC[,MP,AS,1:(y-nyears)],ncol=(y-nyears),nrow=nsim),
                         "curTAC"=rep(TAC2020[AS],nsim),
                         "TH"=TH
        )
      } # end of assessment area

      TACtrial<-array(NA,c(nsim,nAss))

      for(AS in 1:nAss){
        #SPAYMRF
        AA<-Assess_data[AS,]

        assign("dset",dset,envir=globalenv()) # debugging
        if(sfIsRunning())sfExport("dset")
        if(class(get(MPsa[[MP]][AS]))=="MP"){
          if(sfIsRunning()&!MSEparallel){
            TACtrial[,AS]<-sfSapply(1:nsim,get(MPsa[[MP]][AS]),dset[[AS]])
          }else{
            TACtrial[,AS]<-sapply(1:nsim,get(MPsa[[MP]][AS]),dset[[AS]])
          }
        }else if(class(get(MPsa[[MP]][AS]))=="MSMP"){
          if(sfIsRunning()&!MSEparallel){
            TACtrial[,AS]<-sfSapply(1:nsim,get(MPsa[[MP]][AS]),dset,AS=AS)
          }else{
            TACtrial[,AS]<-sapply(1:nsim,get(MPsa[[MP]][AS]),dset,AS=AS)
          }
        }

        if(MPsa[[MP]][AS]!="ZeroC"){
          TACmax=(1+maxTAC[AS])*TAC[,AS]
          TACmin=(max(0.01,1-maxTAC[AS]))*TAC[,AS]
          cond=TACtrial[,AS]<TACmin
          TACtrial[cond,AS]=TACmin[cond]
          cond=TACtrial[,AS]>TACmax
          TACtrial[cond,AS]=TACmax[cond]
        }

        if(y<allyears).Object@TAC[,MP,AS,y-nyears+1]<-TAC[,AS]<-TACtrial[,AS]

      }

      testC[testCind]<-TAC[testCind[,c(1,5)]]*TACdist[testCind] # predicted catch by TAC
      aggC<-apply(testC,1:4,sum) #nsim, nsubyears, nareas, nfleets


    }else{ # if !(y%in$upyrs)

      if(y>(nyears+MPlag)).Object@TAC[,MP,,y-nyears+1]<-.Object@TAC[,MP,,y-nyears] # TAC for next year

    } # end of upyrs

    SPAYMR[,4]<-y
    SPAYMRF2[,4]<-y
    SPAY<-SPAYMR[,1:4]
    SPAY2<-SPAYMRF2[,1:4]
    SFAY2<-SPAYMRF2[,c(1,7,3,4)]

    #for(m in 1:nsubyears){
      m<-1 #  m<-m+1

      SPAYMR[,5]<-m
      SPAM<-SPAYMR[,c(1:3,5)]
      SPAYMRF2[,5]<-m
      SFYMR2<-SPAYMRF2[,c(1,7,4:6)]
      SPAYMR2<-SPAYMRF2[,1:6]

      if(m==1){
        N[,,,y,m,]<-N[,,,y-1,nsubyears,]*exp(-Z[,,,y-1,nsubyears,])
      }else{
        N[,,,y,m,]<-N[,,,y,m-1,]*exp(-Z[,,,y,m-1,])
      }

      # move fish spaymrr
      mi<-movIndex[y]
      N[,,,y,m,]<-domov(N[,,,y,m,],mov[,,,mi,m,,])

      Biomass[,,,y,m,]<-N[,,,y,m,]*array(Wt_age[,,,nyears],c(nsim,npop,nages,nareas))

      Btemp<-apply(Biomass[,,,y,m,],c(1,4),sum)

      if(Reallocate){
        for(AS in 1:nAss){ # Max F redistribution at the catch-at-numbers scale

          AA<-Assess_data[AS,]
          testU<-aggC[,m,AA,]/array(Btemp[,AA],dim(aggC[,m,AA,])) # implied harvest rate
          cond<-testU>0.9
          cond[is.na(cond)]<-T
          Cunder<-array(0,c(nsim,sum(AA),nfleets))
          Cunder[cond]<-aggC[,m,AA,][cond]*(testU[cond]-0.9)/testU[cond]
          aggC[,m,AA,][cond]<-aggC[,m,AA,][cond]-Cunder[cond]
          CunderT<-apply(Cunder,1,sum)
          Cdist<-array(0,c(nsim,sum(AA),nfleets))
          Cdist[!cond]<-aggC[,m,AA,][!cond]
          Cdist<-(Cdist/array(apply(Cdist,1,sum,na.rm=T),c(nsim,sum(AA),nfleets)))*array(CunderT,c(nsim,sum(AA),nfleets))
          aggC[,m,AA,]<-aggC[,m,AA,]+Cdist

        }
      }

      testU<-aggC[,m,,]/array(Btemp,dim(aggC[,m,,])) # implied harvest rate
      testC2<-do.call(IE,list(testU))*array(Btemp,dim(aggC[,m,,]))

      CAdist[SPRFA2]<-N[SPAYMR2]*Wt_age[SPAL]*sel[SPAF2] # predicted vulnerable biomass each strata
      CAdist[CAdist==0]<-tiny # you have to do this otherwise zero fish can lead to missing catches
      CAdistsum<-apply(CAdist,c(1,3,4),sum)                # total in each sim, region and fleet

      CAdist[SPRFA2]<-CAdist[SPRFA2]/CAdistsum[SPRFA2[,c(1,3,4)]] # fraction in each stock and age class per sim region and fleet
      CAdist[is.na(CAdist)]<-0

      C[SPAYMRF2]<-testC2[SRF2]*CAdist[SPRFA2]
      C[SPAYMRF2][is.na(C[SPAYMRF2])]<-0

      C[SPAYMRF2]<-C[SPAYMRF2]/Wt_age[SPAL] # divide by weight to get numbers

      Up<-C[,,,y,m,,]/array(N[,,,y,m,],c(nsim,npop,nages,nareas,nfleets)) # harvest rate disaggregated by age
      Up[is.na(Up)|Up<tiny]<-tiny # otherwise you can't generate some of the automatic fishery data
      Up[Up>0.9]<-0.9  # 90% max U by age (this is where catches can go 'under' those specified)
      FM[SPAYMRF2]<-(-log(1-Up[SPARF2])) # get F

      Ftot<-apply(FM[,,,y,m,,],1:4,sum,na.rm=T)
      Z[SPAYMR]<-Ftot[SPAR]+M[SPAY]/nsubyears

      if(doGT) GT<-calc_GT(GT=GT,y=y, m=m, N=N, FM=FM, M=M, mov=mov,
                           nsubyears=nsubyears, movIndex=movIndex, nsim=nsim,
                           nages=nages,npop=npop,nyears=nyears)

      for(pp in 1:npop){

        SSB[,pp,,y,m,]<-N[,pp,,y-1,m,]*array(Wt_age[,pp,,nyears]*mat[,pp,,nyears],dim=c(nsim,nages,nareas))

        if(Recsubyr[pp]==m){

          SSBtemp<-apply(SSB[,pp,,y,m,],c(1,3),sum)*canspawn[,pp,] # viable spawning biomass
          spawnr<-SSBtemp/array(apply(SSBtemp,1,sum),dim(SSBtemp))
          N[,pp,nages,y,m,]<-N[,pp,nages,y,m,]+N[,pp,nages-1,y,m,] # plus group
          N[,pp,2:(nages-1),y,m,]<-N[,pp,1:(nages-2),y,m,]
          maxind<-min(y-nyears+1,dim(OM@Recind)[2])
          SRno<-OM@Recind[pp,maxind]
          R0<-OM@Recpars[,SRno,2]
          R0_proj[pp,y]<-R0[1] # record projected R0
          SSB0=R0*SSBpR[,pp]    #// Unfished Spawning Stock Biomass
          SSBt<-apply(SSB[,pp,,y,m,],1,sum)
          SSB_proj[MP,,pp,y]<-SSBt

          if(OM@Rectype[SRno]=="BH"){

            h<- OM@Recpars[,SRno,1]
            N[,pp,1,y,m,]<-exp(Pe[,pp,y])*spawnr*((0.8*R0*h*SSBt) / (0.2*SSBpR[,pp]*R0*(1-h) + (h-0.2)*SSBt))
            Rec_err[MP,,pp,y]<-apply(N[,pp,1,y,m,],1,sum) # Record Stochastic Recruitment
            Rec_mu[MP,,pp,y]<-Rec_err[MP,,pp,y]/exp(Pe[,pp,y]) # Record Mean Recruitment

          }else{ # hockey stick

            inflect<-OM@Recpars[,SRno,1]
            N[,pp,1,y,m,]<-exp(Pe[,pp,y])*spawnr*R0
            cond<-SSBt<(SSB0*inflect)
            N[cond,pp,1,y,m,]<-N[cond,pp,1,y,m,]*SSBt[cond]/(SSB0[cond]*inflect[cond])

          }

        } # if its the right subyear


      } # end of pop

    } # end of subyear

    BBd<-N[,,,y,,]*rep(Wt_age[,,,1],nareas*nsubyears)
    BBa[MP,,,nHyears+y]<-apply(BBd[,,,2,],1:2,sum)
    BB[MP,,1,nHyears+y]<-apply(BBd[,,,2,4:7],1,sum)
    BB[MP,,2,nHyears+y]<-apply(BBd[,,,2,1:3],1,sum)

  } # end of year
















